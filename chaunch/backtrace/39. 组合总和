class Solution {
    List<List<Integer>> ans = new ArrayList();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        //在无重复元素且位正数的情况下才能这么做
        Arrays.sort(candidates);
        List<Integer> subAns = new ArrayList();
        dfs(0,subAns,target,candidates);
        return ans;
    }
    public void dfs(int start ,List<Integer> subAns,int target,int[] candidates)
    {
        if(target<0)
        {
            return ;
        }
        if(0==target)
        {
            ans.add(new ArrayList(subAns));
            return;
        }
        for(int i=start;i<candidates.length;i++)
        {
         //因为每个数字都可以使用无数次，所以递归还可以从当前元素开始
            subAns.add(candidates[i]);
            dfs(i,subAns,target-candidates[i],candidates);
            subAns.remove(subAns.size()-1);
        }
    }

}
