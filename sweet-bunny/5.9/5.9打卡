/*输入一个整型数组，数组里有正数也有负数。数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。*/
class Solution {
    public int maxSubArray(int[] nums) {
        int max=nums[0];
        int maxShuzu[]=new int[nums.length];
        maxShuzu[0]=nums[0];
        for(int i=1;i<nums.length;i++){
            maxShuzu[i]=Math.max(nums[i],maxShuzu[i-1]+nums[i]);
            if(maxShuzu[i]>max){
                max=maxShuzu[i];
            }
        }
        return max;
    }
}
/*字符串的排列*/
class Solution {
    public String[] permutation(String s) {
        ArrayList<String> list=new ArrayList<>();
        if(s==null||s.length()<=0){
            return null;
        }
        permutationCore(s.toCharArray(),0,list);
        Collections.sort(list);
        String[] daan=new String[list.size()];
        for(int i=0;i<list.size();i++){
            daan[i]=list.get(i);
        }
        return daan;
    }
    public void permutationCore(char[] str,int index,ArrayList<String> list){
        if(index==str.length-1){
            if(!list.contains(String.valueOf(str))){
                list.add(String.valueOf(str));
            }
        }else{
            for(int i=index;i<str.length;i++){
                char tmp=str[i];
                str[i]=str[index];
                str[index]=tmp;
                permutationCore(str,index+1,list);
                char tmp1=str[i];
                str[i]=str[index];
                str[index]=tmp1;
            }
        }
    }
}
